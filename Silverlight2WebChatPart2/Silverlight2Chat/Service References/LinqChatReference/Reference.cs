//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace Silverlight2Chat.LinqChatReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageContract", Namespace="http://schemas.datacontract.org/2004/07/Silverlight2Chat.Web")]
    public partial class MessageContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColorField;
        
        private int MessageIDField;
        
        private string TextField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageID {
            get {
                return this.MessageIDField;
            }
            set {
                if ((this.MessageIDField.Equals(value) != true)) {
                    this.MessageIDField = value;
                    this.RaisePropertyChanged("MessageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateMessageContract", Namespace="http://schemas.datacontract.org/2004/07/Silverlight2Chat.Web")]
    public partial class PrivateMessageContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int PrivateMessageIDField;
        
        private System.DateTime TimeUserSentInvitationField;
        
        private int ToUserIDField;
        
        private int UserIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateMessageID {
            get {
                return this.PrivateMessageIDField;
            }
            set {
                if ((this.PrivateMessageIDField.Equals(value) != true)) {
                    this.PrivateMessageIDField = value;
                    this.RaisePropertyChanged("PrivateMessageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeUserSentInvitation {
            get {
                return this.TimeUserSentInvitationField;
            }
            set {
                if ((this.TimeUserSentInvitationField.Equals(value) != true)) {
                    this.TimeUserSentInvitationField = value;
                    this.RaisePropertyChanged("TimeUserSentInvitation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToUserID {
            get {
                return this.ToUserIDField;
            }
            set {
                if ((this.ToUserIDField.Equals(value) != true)) {
                    this.ToUserIDField = value;
                    this.RaisePropertyChanged("ToUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserContract", Namespace="http://schemas.datacontract.org/2004/07/Silverlight2Chat.Web")]
    public partial class UserContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int UserIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoomContract", Namespace="http://schemas.datacontract.org/2004/07/Silverlight2Chat.Web")]
    public partial class RoomContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private int RoomIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoomID {
            get {
                return this.RoomIDField;
            }
            set {
                if ((this.RoomIDField.Equals(value) != true)) {
                    this.RoomIDField = value;
                    this.RaisePropertyChanged("RoomID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LinqChatReference.ILinqChatService")]
    public interface ILinqChatService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/UserExist", ReplyAction="http://tempuri.org/ILinqChatService/UserExistResponse")]
        System.IAsyncResult BeginUserExist(string username, string password, System.AsyncCallback callback, object asyncState);
        
        int EndUserExist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/GetMessages", ReplyAction="http://tempuri.org/ILinqChatService/GetMessagesResponse")]
        System.IAsyncResult BeginGetMessages(int messageID, int roomID, System.DateTime timeUserJoined, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> EndGetMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/GetPrivateMessages", ReplyAction="http://tempuri.org/ILinqChatService/GetPrivateMessagesResponse")]
        System.IAsyncResult BeginGetPrivateMessages(System.DateTime timeUserSentInvitation, int messageID, int fromUserId, int toUserId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> EndGetPrivateMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/InsertPrivateMessageInvite", ReplyAction="http://tempuri.org/ILinqChatService/InsertPrivateMessageInviteResponse")]
        System.IAsyncResult BeginInsertPrivateMessageInvite(int userID, int toUserID, System.AsyncCallback callback, object asyncState);
        
        void EndInsertPrivateMessageInvite(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/GetPrivateMessageInvites", ReplyAction="http://tempuri.org/ILinqChatService/GetPrivateMessageInvitesResponse")]
        System.IAsyncResult BeginGetPrivateMessageInvites(int toUserID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.PrivateMessageContract> EndGetPrivateMessageInvites(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/DeletePrivateMessage", ReplyAction="http://tempuri.org/ILinqChatService/DeletePrivateMessageResponse")]
        System.IAsyncResult BeginDeletePrivateMessage(int privateMessageID, System.AsyncCallback callback, object asyncState);
        
        void EndDeletePrivateMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/InsertMessage", ReplyAction="http://tempuri.org/ILinqChatService/InsertMessageResponse")]
        System.IAsyncResult BeginInsertMessage(System.Nullable<int> roomID, int userID, System.Nullable<int> toUserID, string messageText, string color, System.AsyncCallback callback, object asyncState);
        
        void EndInsertMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/GetUsers", ReplyAction="http://tempuri.org/ILinqChatService/GetUsersResponse")]
        System.IAsyncResult BeginGetUsers(int roomID, int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.UserContract> EndGetUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/LogInUser", ReplyAction="http://tempuri.org/ILinqChatService/LogInUserResponse")]
        System.IAsyncResult BeginLogInUser(int userID, System.AsyncCallback callback, object asyncState);
        
        void EndLogInUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/LogOutUser", ReplyAction="http://tempuri.org/ILinqChatService/LogOutUserResponse")]
        System.IAsyncResult BeginLogOutUser(int userID, int roomID, string username, System.AsyncCallback callback, object asyncState);
        
        void EndLogOutUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/LeaveRoom", ReplyAction="http://tempuri.org/ILinqChatService/LeaveRoomResponse")]
        System.IAsyncResult BeginLeaveRoom(int userID, int roomID, string username, System.AsyncCallback callback, object asyncState);
        
        void EndLeaveRoom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILinqChatService/GetRooms", ReplyAction="http://tempuri.org/ILinqChatService/GetRoomsResponse")]
        System.IAsyncResult BeginGetRooms(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.RoomContract> EndGetRooms(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ILinqChatServiceChannel : Silverlight2Chat.LinqChatReference.ILinqChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UserExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetPrivateMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPrivateMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetPrivateMessageInvitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPrivateMessageInvitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.PrivateMessageContract> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.PrivateMessageContract>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.UserContract> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.UserContract>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetRoomsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRoomsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.RoomContract> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.RoomContract>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class LinqChatServiceClient : System.ServiceModel.ClientBase<Silverlight2Chat.LinqChatReference.ILinqChatService>, Silverlight2Chat.LinqChatReference.ILinqChatService {
        
        private BeginOperationDelegate onBeginUserExistDelegate;
        
        private EndOperationDelegate onEndUserExistDelegate;
        
        private System.Threading.SendOrPostCallback onUserExistCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessagesDelegate;
        
        private EndOperationDelegate onEndGetMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPrivateMessagesDelegate;
        
        private EndOperationDelegate onEndGetPrivateMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetPrivateMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertPrivateMessageInviteDelegate;
        
        private EndOperationDelegate onEndInsertPrivateMessageInviteDelegate;
        
        private System.Threading.SendOrPostCallback onInsertPrivateMessageInviteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPrivateMessageInvitesDelegate;
        
        private EndOperationDelegate onEndGetPrivateMessageInvitesDelegate;
        
        private System.Threading.SendOrPostCallback onGetPrivateMessageInvitesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeletePrivateMessageDelegate;
        
        private EndOperationDelegate onEndDeletePrivateMessageDelegate;
        
        private System.Threading.SendOrPostCallback onDeletePrivateMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertMessageDelegate;
        
        private EndOperationDelegate onEndInsertMessageDelegate;
        
        private System.Threading.SendOrPostCallback onInsertMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogInUserDelegate;
        
        private EndOperationDelegate onEndLogInUserDelegate;
        
        private System.Threading.SendOrPostCallback onLogInUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogOutUserDelegate;
        
        private EndOperationDelegate onEndLogOutUserDelegate;
        
        private System.Threading.SendOrPostCallback onLogOutUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginLeaveRoomDelegate;
        
        private EndOperationDelegate onEndLeaveRoomDelegate;
        
        private System.Threading.SendOrPostCallback onLeaveRoomCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRoomsDelegate;
        
        private EndOperationDelegate onEndGetRoomsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRoomsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LinqChatServiceClient() {
        }
        
        public LinqChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LinqChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LinqChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LinqChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<UserExistCompletedEventArgs> UserExistCompleted;
        
        public event System.EventHandler<GetMessagesCompletedEventArgs> GetMessagesCompleted;
        
        public event System.EventHandler<GetPrivateMessagesCompletedEventArgs> GetPrivateMessagesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertPrivateMessageInviteCompleted;
        
        public event System.EventHandler<GetPrivateMessageInvitesCompletedEventArgs> GetPrivateMessageInvitesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeletePrivateMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertMessageCompleted;
        
        public event System.EventHandler<GetUsersCompletedEventArgs> GetUsersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogInUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogOutUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LeaveRoomCompleted;
        
        public event System.EventHandler<GetRoomsCompletedEventArgs> GetRoomsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginUserExist(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserExist(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Silverlight2Chat.LinqChatReference.ILinqChatService.EndUserExist(System.IAsyncResult result) {
            return base.Channel.EndUserExist(result);
        }
        
        private System.IAsyncResult OnBeginUserExist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginUserExist(username, password, callback, asyncState);
        }
        
        private object[] OnEndUserExist(System.IAsyncResult result) {
            int retVal = ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndUserExist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserExistCompleted(object state) {
            if ((this.UserExistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserExistCompleted(this, new UserExistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserExistAsync(string username, string password) {
            this.UserExistAsync(username, password, null);
        }
        
        public void UserExistAsync(string username, string password, object userState) {
            if ((this.onBeginUserExistDelegate == null)) {
                this.onBeginUserExistDelegate = new BeginOperationDelegate(this.OnBeginUserExist);
            }
            if ((this.onEndUserExistDelegate == null)) {
                this.onEndUserExistDelegate = new EndOperationDelegate(this.OnEndUserExist);
            }
            if ((this.onUserExistCompletedDelegate == null)) {
                this.onUserExistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserExistCompleted);
            }
            base.InvokeAsync(this.onBeginUserExistDelegate, new object[] {
                        username,
                        password}, this.onEndUserExistDelegate, this.onUserExistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginGetMessages(int messageID, int roomID, System.DateTime timeUserJoined, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessages(messageID, roomID, timeUserJoined, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> Silverlight2Chat.LinqChatReference.ILinqChatService.EndGetMessages(System.IAsyncResult result) {
            return base.Channel.EndGetMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int messageID = ((int)(inValues[0]));
            int roomID = ((int)(inValues[1]));
            System.DateTime timeUserJoined = ((System.DateTime)(inValues[2]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginGetMessages(messageID, roomID, timeUserJoined, callback, asyncState);
        }
        
        private object[] OnEndGetMessages(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> retVal = ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndGetMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessagesCompleted(object state) {
            if ((this.GetMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessagesAsync(int messageID, int roomID, System.DateTime timeUserJoined) {
            this.GetMessagesAsync(messageID, roomID, timeUserJoined, null);
        }
        
        public void GetMessagesAsync(int messageID, int roomID, System.DateTime timeUserJoined, object userState) {
            if ((this.onBeginGetMessagesDelegate == null)) {
                this.onBeginGetMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetMessages);
            }
            if ((this.onEndGetMessagesDelegate == null)) {
                this.onEndGetMessagesDelegate = new EndOperationDelegate(this.OnEndGetMessages);
            }
            if ((this.onGetMessagesCompletedDelegate == null)) {
                this.onGetMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessagesDelegate, new object[] {
                        messageID,
                        roomID,
                        timeUserJoined}, this.onEndGetMessagesDelegate, this.onGetMessagesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginGetPrivateMessages(System.DateTime timeUserSentInvitation, int messageID, int fromUserId, int toUserId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPrivateMessages(timeUserSentInvitation, messageID, fromUserId, toUserId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> Silverlight2Chat.LinqChatReference.ILinqChatService.EndGetPrivateMessages(System.IAsyncResult result) {
            return base.Channel.EndGetPrivateMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetPrivateMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime timeUserSentInvitation = ((System.DateTime)(inValues[0]));
            int messageID = ((int)(inValues[1]));
            int fromUserId = ((int)(inValues[2]));
            int toUserId = ((int)(inValues[3]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginGetPrivateMessages(timeUserSentInvitation, messageID, fromUserId, toUserId, callback, asyncState);
        }
        
        private object[] OnEndGetPrivateMessages(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> retVal = ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndGetPrivateMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPrivateMessagesCompleted(object state) {
            if ((this.GetPrivateMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPrivateMessagesCompleted(this, new GetPrivateMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPrivateMessagesAsync(System.DateTime timeUserSentInvitation, int messageID, int fromUserId, int toUserId) {
            this.GetPrivateMessagesAsync(timeUserSentInvitation, messageID, fromUserId, toUserId, null);
        }
        
        public void GetPrivateMessagesAsync(System.DateTime timeUserSentInvitation, int messageID, int fromUserId, int toUserId, object userState) {
            if ((this.onBeginGetPrivateMessagesDelegate == null)) {
                this.onBeginGetPrivateMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetPrivateMessages);
            }
            if ((this.onEndGetPrivateMessagesDelegate == null)) {
                this.onEndGetPrivateMessagesDelegate = new EndOperationDelegate(this.OnEndGetPrivateMessages);
            }
            if ((this.onGetPrivateMessagesCompletedDelegate == null)) {
                this.onGetPrivateMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPrivateMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetPrivateMessagesDelegate, new object[] {
                        timeUserSentInvitation,
                        messageID,
                        fromUserId,
                        toUserId}, this.onEndGetPrivateMessagesDelegate, this.onGetPrivateMessagesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginInsertPrivateMessageInvite(int userID, int toUserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertPrivateMessageInvite(userID, toUserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Silverlight2Chat.LinqChatReference.ILinqChatService.EndInsertPrivateMessageInvite(System.IAsyncResult result) {
            base.Channel.EndInsertPrivateMessageInvite(result);
        }
        
        private System.IAsyncResult OnBeginInsertPrivateMessageInvite(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int toUserID = ((int)(inValues[1]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginInsertPrivateMessageInvite(userID, toUserID, callback, asyncState);
        }
        
        private object[] OnEndInsertPrivateMessageInvite(System.IAsyncResult result) {
            ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndInsertPrivateMessageInvite(result);
            return null;
        }
        
        private void OnInsertPrivateMessageInviteCompleted(object state) {
            if ((this.InsertPrivateMessageInviteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertPrivateMessageInviteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertPrivateMessageInviteAsync(int userID, int toUserID) {
            this.InsertPrivateMessageInviteAsync(userID, toUserID, null);
        }
        
        public void InsertPrivateMessageInviteAsync(int userID, int toUserID, object userState) {
            if ((this.onBeginInsertPrivateMessageInviteDelegate == null)) {
                this.onBeginInsertPrivateMessageInviteDelegate = new BeginOperationDelegate(this.OnBeginInsertPrivateMessageInvite);
            }
            if ((this.onEndInsertPrivateMessageInviteDelegate == null)) {
                this.onEndInsertPrivateMessageInviteDelegate = new EndOperationDelegate(this.OnEndInsertPrivateMessageInvite);
            }
            if ((this.onInsertPrivateMessageInviteCompletedDelegate == null)) {
                this.onInsertPrivateMessageInviteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertPrivateMessageInviteCompleted);
            }
            base.InvokeAsync(this.onBeginInsertPrivateMessageInviteDelegate, new object[] {
                        userID,
                        toUserID}, this.onEndInsertPrivateMessageInviteDelegate, this.onInsertPrivateMessageInviteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginGetPrivateMessageInvites(int toUserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPrivateMessageInvites(toUserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.PrivateMessageContract> Silverlight2Chat.LinqChatReference.ILinqChatService.EndGetPrivateMessageInvites(System.IAsyncResult result) {
            return base.Channel.EndGetPrivateMessageInvites(result);
        }
        
        private System.IAsyncResult OnBeginGetPrivateMessageInvites(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int toUserID = ((int)(inValues[0]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginGetPrivateMessageInvites(toUserID, callback, asyncState);
        }
        
        private object[] OnEndGetPrivateMessageInvites(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.PrivateMessageContract> retVal = ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndGetPrivateMessageInvites(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPrivateMessageInvitesCompleted(object state) {
            if ((this.GetPrivateMessageInvitesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPrivateMessageInvitesCompleted(this, new GetPrivateMessageInvitesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPrivateMessageInvitesAsync(int toUserID) {
            this.GetPrivateMessageInvitesAsync(toUserID, null);
        }
        
        public void GetPrivateMessageInvitesAsync(int toUserID, object userState) {
            if ((this.onBeginGetPrivateMessageInvitesDelegate == null)) {
                this.onBeginGetPrivateMessageInvitesDelegate = new BeginOperationDelegate(this.OnBeginGetPrivateMessageInvites);
            }
            if ((this.onEndGetPrivateMessageInvitesDelegate == null)) {
                this.onEndGetPrivateMessageInvitesDelegate = new EndOperationDelegate(this.OnEndGetPrivateMessageInvites);
            }
            if ((this.onGetPrivateMessageInvitesCompletedDelegate == null)) {
                this.onGetPrivateMessageInvitesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPrivateMessageInvitesCompleted);
            }
            base.InvokeAsync(this.onBeginGetPrivateMessageInvitesDelegate, new object[] {
                        toUserID}, this.onEndGetPrivateMessageInvitesDelegate, this.onGetPrivateMessageInvitesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginDeletePrivateMessage(int privateMessageID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeletePrivateMessage(privateMessageID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Silverlight2Chat.LinqChatReference.ILinqChatService.EndDeletePrivateMessage(System.IAsyncResult result) {
            base.Channel.EndDeletePrivateMessage(result);
        }
        
        private System.IAsyncResult OnBeginDeletePrivateMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int privateMessageID = ((int)(inValues[0]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginDeletePrivateMessage(privateMessageID, callback, asyncState);
        }
        
        private object[] OnEndDeletePrivateMessage(System.IAsyncResult result) {
            ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndDeletePrivateMessage(result);
            return null;
        }
        
        private void OnDeletePrivateMessageCompleted(object state) {
            if ((this.DeletePrivateMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeletePrivateMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeletePrivateMessageAsync(int privateMessageID) {
            this.DeletePrivateMessageAsync(privateMessageID, null);
        }
        
        public void DeletePrivateMessageAsync(int privateMessageID, object userState) {
            if ((this.onBeginDeletePrivateMessageDelegate == null)) {
                this.onBeginDeletePrivateMessageDelegate = new BeginOperationDelegate(this.OnBeginDeletePrivateMessage);
            }
            if ((this.onEndDeletePrivateMessageDelegate == null)) {
                this.onEndDeletePrivateMessageDelegate = new EndOperationDelegate(this.OnEndDeletePrivateMessage);
            }
            if ((this.onDeletePrivateMessageCompletedDelegate == null)) {
                this.onDeletePrivateMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeletePrivateMessageCompleted);
            }
            base.InvokeAsync(this.onBeginDeletePrivateMessageDelegate, new object[] {
                        privateMessageID}, this.onEndDeletePrivateMessageDelegate, this.onDeletePrivateMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginInsertMessage(System.Nullable<int> roomID, int userID, System.Nullable<int> toUserID, string messageText, string color, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertMessage(roomID, userID, toUserID, messageText, color, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Silverlight2Chat.LinqChatReference.ILinqChatService.EndInsertMessage(System.IAsyncResult result) {
            base.Channel.EndInsertMessage(result);
        }
        
        private System.IAsyncResult OnBeginInsertMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> roomID = ((System.Nullable<int>)(inValues[0]));
            int userID = ((int)(inValues[1]));
            System.Nullable<int> toUserID = ((System.Nullable<int>)(inValues[2]));
            string messageText = ((string)(inValues[3]));
            string color = ((string)(inValues[4]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginInsertMessage(roomID, userID, toUserID, messageText, color, callback, asyncState);
        }
        
        private object[] OnEndInsertMessage(System.IAsyncResult result) {
            ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndInsertMessage(result);
            return null;
        }
        
        private void OnInsertMessageCompleted(object state) {
            if ((this.InsertMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertMessageAsync(System.Nullable<int> roomID, int userID, System.Nullable<int> toUserID, string messageText, string color) {
            this.InsertMessageAsync(roomID, userID, toUserID, messageText, color, null);
        }
        
        public void InsertMessageAsync(System.Nullable<int> roomID, int userID, System.Nullable<int> toUserID, string messageText, string color, object userState) {
            if ((this.onBeginInsertMessageDelegate == null)) {
                this.onBeginInsertMessageDelegate = new BeginOperationDelegate(this.OnBeginInsertMessage);
            }
            if ((this.onEndInsertMessageDelegate == null)) {
                this.onEndInsertMessageDelegate = new EndOperationDelegate(this.OnEndInsertMessage);
            }
            if ((this.onInsertMessageCompletedDelegate == null)) {
                this.onInsertMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertMessageCompleted);
            }
            base.InvokeAsync(this.onBeginInsertMessageDelegate, new object[] {
                        roomID,
                        userID,
                        toUserID,
                        messageText,
                        color}, this.onEndInsertMessageDelegate, this.onInsertMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginGetUsers(int roomID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(roomID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.UserContract> Silverlight2Chat.LinqChatReference.ILinqChatService.EndGetUsers(System.IAsyncResult result) {
            return base.Channel.EndGetUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int roomID = ((int)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginGetUsers(roomID, userID, callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.UserContract> retVal = ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndGetUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync(int roomID, int userID) {
            this.GetUsersAsync(roomID, userID, null);
        }
        
        public void GetUsersAsync(int roomID, int userID, object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, new object[] {
                        roomID,
                        userID}, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginLogInUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogInUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Silverlight2Chat.LinqChatReference.ILinqChatService.EndLogInUser(System.IAsyncResult result) {
            base.Channel.EndLogInUser(result);
        }
        
        private System.IAsyncResult OnBeginLogInUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginLogInUser(userID, callback, asyncState);
        }
        
        private object[] OnEndLogInUser(System.IAsyncResult result) {
            ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndLogInUser(result);
            return null;
        }
        
        private void OnLogInUserCompleted(object state) {
            if ((this.LogInUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogInUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogInUserAsync(int userID) {
            this.LogInUserAsync(userID, null);
        }
        
        public void LogInUserAsync(int userID, object userState) {
            if ((this.onBeginLogInUserDelegate == null)) {
                this.onBeginLogInUserDelegate = new BeginOperationDelegate(this.OnBeginLogInUser);
            }
            if ((this.onEndLogInUserDelegate == null)) {
                this.onEndLogInUserDelegate = new EndOperationDelegate(this.OnEndLogInUser);
            }
            if ((this.onLogInUserCompletedDelegate == null)) {
                this.onLogInUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogInUserCompleted);
            }
            base.InvokeAsync(this.onBeginLogInUserDelegate, new object[] {
                        userID}, this.onEndLogInUserDelegate, this.onLogInUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginLogOutUser(int userID, int roomID, string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogOutUser(userID, roomID, username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Silverlight2Chat.LinqChatReference.ILinqChatService.EndLogOutUser(System.IAsyncResult result) {
            base.Channel.EndLogOutUser(result);
        }
        
        private System.IAsyncResult OnBeginLogOutUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int roomID = ((int)(inValues[1]));
            string username = ((string)(inValues[2]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginLogOutUser(userID, roomID, username, callback, asyncState);
        }
        
        private object[] OnEndLogOutUser(System.IAsyncResult result) {
            ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndLogOutUser(result);
            return null;
        }
        
        private void OnLogOutUserCompleted(object state) {
            if ((this.LogOutUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogOutUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogOutUserAsync(int userID, int roomID, string username) {
            this.LogOutUserAsync(userID, roomID, username, null);
        }
        
        public void LogOutUserAsync(int userID, int roomID, string username, object userState) {
            if ((this.onBeginLogOutUserDelegate == null)) {
                this.onBeginLogOutUserDelegate = new BeginOperationDelegate(this.OnBeginLogOutUser);
            }
            if ((this.onEndLogOutUserDelegate == null)) {
                this.onEndLogOutUserDelegate = new EndOperationDelegate(this.OnEndLogOutUser);
            }
            if ((this.onLogOutUserCompletedDelegate == null)) {
                this.onLogOutUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogOutUserCompleted);
            }
            base.InvokeAsync(this.onBeginLogOutUserDelegate, new object[] {
                        userID,
                        roomID,
                        username}, this.onEndLogOutUserDelegate, this.onLogOutUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginLeaveRoom(int userID, int roomID, string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLeaveRoom(userID, roomID, username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Silverlight2Chat.LinqChatReference.ILinqChatService.EndLeaveRoom(System.IAsyncResult result) {
            base.Channel.EndLeaveRoom(result);
        }
        
        private System.IAsyncResult OnBeginLeaveRoom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int roomID = ((int)(inValues[1]));
            string username = ((string)(inValues[2]));
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginLeaveRoom(userID, roomID, username, callback, asyncState);
        }
        
        private object[] OnEndLeaveRoom(System.IAsyncResult result) {
            ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndLeaveRoom(result);
            return null;
        }
        
        private void OnLeaveRoomCompleted(object state) {
            if ((this.LeaveRoomCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LeaveRoomCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LeaveRoomAsync(int userID, int roomID, string username) {
            this.LeaveRoomAsync(userID, roomID, username, null);
        }
        
        public void LeaveRoomAsync(int userID, int roomID, string username, object userState) {
            if ((this.onBeginLeaveRoomDelegate == null)) {
                this.onBeginLeaveRoomDelegate = new BeginOperationDelegate(this.OnBeginLeaveRoom);
            }
            if ((this.onEndLeaveRoomDelegate == null)) {
                this.onEndLeaveRoomDelegate = new EndOperationDelegate(this.OnEndLeaveRoom);
            }
            if ((this.onLeaveRoomCompletedDelegate == null)) {
                this.onLeaveRoomCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLeaveRoomCompleted);
            }
            base.InvokeAsync(this.onBeginLeaveRoomDelegate, new object[] {
                        userID,
                        roomID,
                        username}, this.onEndLeaveRoomDelegate, this.onLeaveRoomCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight2Chat.LinqChatReference.ILinqChatService.BeginGetRooms(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRooms(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.RoomContract> Silverlight2Chat.LinqChatReference.ILinqChatService.EndGetRooms(System.IAsyncResult result) {
            return base.Channel.EndGetRooms(result);
        }
        
        private System.IAsyncResult OnBeginGetRooms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).BeginGetRooms(callback, asyncState);
        }
        
        private object[] OnEndGetRooms(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.RoomContract> retVal = ((Silverlight2Chat.LinqChatReference.ILinqChatService)(this)).EndGetRooms(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRoomsCompleted(object state) {
            if ((this.GetRoomsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRoomsCompleted(this, new GetRoomsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRoomsAsync() {
            this.GetRoomsAsync(null);
        }
        
        public void GetRoomsAsync(object userState) {
            if ((this.onBeginGetRoomsDelegate == null)) {
                this.onBeginGetRoomsDelegate = new BeginOperationDelegate(this.OnBeginGetRooms);
            }
            if ((this.onEndGetRoomsDelegate == null)) {
                this.onEndGetRoomsDelegate = new EndOperationDelegate(this.OnEndGetRooms);
            }
            if ((this.onGetRoomsCompletedDelegate == null)) {
                this.onGetRoomsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRoomsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRoomsDelegate, null, this.onEndGetRoomsDelegate, this.onGetRoomsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Silverlight2Chat.LinqChatReference.ILinqChatService CreateChannel() {
            return new LinqChatServiceClientChannel(this);
        }
        
        private class LinqChatServiceClientChannel : ChannelBase<Silverlight2Chat.LinqChatReference.ILinqChatService>, Silverlight2Chat.LinqChatReference.ILinqChatService {
            
            public LinqChatServiceClientChannel(System.ServiceModel.ClientBase<Silverlight2Chat.LinqChatReference.ILinqChatService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginUserExist(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("UserExist", _args, callback, asyncState);
                return _result;
            }
            
            public int EndUserExist(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("UserExist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMessages(int messageID, int roomID, System.DateTime timeUserJoined, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = messageID;
                _args[1] = roomID;
                _args[2] = timeUserJoined;
                System.IAsyncResult _result = base.BeginInvoke("GetMessages", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> EndGetMessages(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract>)(base.EndInvoke("GetMessages", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPrivateMessages(System.DateTime timeUserSentInvitation, int messageID, int fromUserId, int toUserId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = timeUserSentInvitation;
                _args[1] = messageID;
                _args[2] = fromUserId;
                _args[3] = toUserId;
                System.IAsyncResult _result = base.BeginInvoke("GetPrivateMessages", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> EndGetPrivateMessages(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.MessageContract>)(base.EndInvoke("GetPrivateMessages", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertPrivateMessageInvite(int userID, int toUserID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = toUserID;
                System.IAsyncResult _result = base.BeginInvoke("InsertPrivateMessageInvite", _args, callback, asyncState);
                return _result;
            }
            
            public void EndInsertPrivateMessageInvite(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("InsertPrivateMessageInvite", _args, result);
            }
            
            public System.IAsyncResult BeginGetPrivateMessageInvites(int toUserID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = toUserID;
                System.IAsyncResult _result = base.BeginInvoke("GetPrivateMessageInvites", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.PrivateMessageContract> EndGetPrivateMessageInvites(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.PrivateMessageContract> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.PrivateMessageContract>)(base.EndInvoke("GetPrivateMessageInvites", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeletePrivateMessage(int privateMessageID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = privateMessageID;
                System.IAsyncResult _result = base.BeginInvoke("DeletePrivateMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeletePrivateMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeletePrivateMessage", _args, result);
            }
            
            public System.IAsyncResult BeginInsertMessage(System.Nullable<int> roomID, int userID, System.Nullable<int> toUserID, string messageText, string color, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = roomID;
                _args[1] = userID;
                _args[2] = toUserID;
                _args[3] = messageText;
                _args[4] = color;
                System.IAsyncResult _result = base.BeginInvoke("InsertMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndInsertMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("InsertMessage", _args, result);
            }
            
            public System.IAsyncResult BeginGetUsers(int roomID, int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = roomID;
                _args[1] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.UserContract> EndGetUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.UserContract> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.UserContract>)(base.EndInvoke("GetUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogInUser(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("LogInUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogInUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LogInUser", _args, result);
            }
            
            public System.IAsyncResult BeginLogOutUser(int userID, int roomID, string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userID;
                _args[1] = roomID;
                _args[2] = username;
                System.IAsyncResult _result = base.BeginInvoke("LogOutUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogOutUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LogOutUser", _args, result);
            }
            
            public System.IAsyncResult BeginLeaveRoom(int userID, int roomID, string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userID;
                _args[1] = roomID;
                _args[2] = username;
                System.IAsyncResult _result = base.BeginInvoke("LeaveRoom", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLeaveRoom(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LeaveRoom", _args, result);
            }
            
            public System.IAsyncResult BeginGetRooms(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRooms", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.RoomContract> EndGetRooms(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.RoomContract> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight2Chat.LinqChatReference.RoomContract>)(base.EndInvoke("GetRooms", _args, result)));
                return _result;
            }
        }
    }
}
